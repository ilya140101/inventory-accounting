Приложение должно иметь многокомпонентную архитектуру, т.е. иметь как
минимум одну сборку в виде файла dll. Все компоненты создаются в рамках общего
решения (файл .sln). ==== Да
В программе должно быть разработано несколько классов. На оценке работы ска-
зывается развитость их функциональности. Рекомендуемые элементы перечис-
ляются ниже:
o Наличие собственного хранилища данных (сущностей) в виде массива или
коллекции (лучше типизированной); ==== нет
o Наличие методов, свойств, индексаторов для работы с этим хранилищем; ==== нет
o Использование интерфейсов и/или абстрактных классов при проектировании
иерархии классов; ==== нет
o Использование механизма исключений для работы с нештатными ситуациями;==== да
o Предпочтительно использовать свойства (возможно, автоматические), а не поля
для хранения данных;==== да
o Переопределение операций.==== да( Product, операция +)
Использование конструкций LINQ для работы с данными. Поскольку по
объективным причинам весеннем семестре 2021 года мы не успеваем рассмотреть
все вариации LINQ, можно ограничиться средствами LINQ to Objects (то есть работа
с объектами в оперативной памяти). ==== да (для выборки из коллекции) 
Работа с файлами, использование стандартных диалогов для их открытия. ==== да (Excel, руководство по искользованию в mainwindow)


Известные проблемы:
1) Excel переодически не закрывает процесс.
2) Если выбрана сортировка в datagrid (по нажатию на колонку), то таблица не обновляется до смены сортировки (решение- после обновления таблицы убирается сортировка).

Инструкция по использованию находится на главном окне и в файле manual.txt

Руководство по проекту:

Во всех окнах (кроме ReportTable) используется один и тот же userControll Table, который содержит в себе настроенный datagrid и поиск по нему (группа textblock под datagrid). 
Элемент Table содержит в себе абсолютно все колонки под класс Product, поэтому в каждом окне ненужные колонки скрываются. 
Класс database отвечает за все действия связанные с БД Microsoft Access (кроме случая, где происходит много запросов к БД, тогда открытие и закрытие соединения происходит вне класса database)
Для поиска и сложных вычислительных методов используется ассинхронность (async/await).
В коде поиска по таблице часть методов закомментированна (по скольку написал более быстрый способ и он пока тестируется).
В папке Excel есть 2 базы товаров: на 3500 товаров и на 7 товаров. В данный момент в проект загруженна база товаров состоящая из 3500 товаров. 
База данных хранит 3 таблицы: Products (товары), Report(записи по отчетам с указанием товара и стоимости), AllReport(записи отчетов, состоящие из номера, типа, даты и суммы).
Информация об исключениях записывается в файл log.txt (bin/Debug).

UserControll:
Table- основной userControll, таблица товаров с поиском.
BigTable- таблица, которая используется для главного окна отчета.
Selection- содержит 2 Table- один для поиска, другой для выбранного товара.

Window:
AddNewItem - добавление нового товара.
AddNewReport - добавление нового отчета.
Loading- окно, которое запускается при переносе БД.
MainWindow- главное окно приложения.
Nomenclature- список товаров с остатками и добавлением новых товаров.
ReportTable- таблица отчетов.
ReportWindow- окно отчета с таблицей товаров.
SelectingPrice- окно уставления новой цены и кол-ва при поступлении.
SelectingQuantity- окно выбора кол-ва товара и скидки при продаже/списании.
SelectionWindow- окно подбора товара.

Ссылка на github: https://github.com/ilya140101/inventory-accounting



